/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package digitaldiary;

import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author aks
 */
public class CalUI extends javax.swing.JFrame {
        
        
    /**
     * Creates new form CalUI
     */
    protected static int realYear, realMonth, realDay, currentYear, currentMonth;
    protected static int selectedDate, selectedMonth, selectedYear;
    public CalUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        calTable = new javax.swing.JTable();
        cmbYear = new javax.swing.JComboBox<>();
        btnNextYear = new javax.swing.JButton();
        btnPrevYear = new javax.swing.JButton();
        btnPrevMonth = new javax.swing.JButton();
        btnNextMonth = new javax.swing.JButton();
        lblMonth = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Calendar");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        calTable.setModel(new DefaultTableModel());
        calTable.setEnabled(false);
        calTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                calMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(calTable);

        cmbYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbYearActionPerformed(evt);
            }
        });

        btnNextYear.setText(">>");
        btnNextYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextYearActionPerformed(evt);
            }
        });

        btnPrevYear.setText("<<");
        btnPrevYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevYearActionPerformed(evt);
            }
        });

        btnPrevMonth.setText("<");
        btnPrevMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevMonthActionPerformed(evt);
            }
        });

        btnNextMonth.setText(">");
        btnNextMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextMonthActionPerformed(evt);
            }
        });

        lblMonth.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMonth.setText("Month");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnPrevYear, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnPrevMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblMonth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnNextMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnNextYear, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addComponent(cmbYear, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnNextYear)
                            .addComponent(btnPrevYear)
                            .addComponent(btnPrevMonth)
                            .addComponent(btnNextMonth)))
                    .addComponent(lblMonth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        GregorianCalendar gregCal = new GregorianCalendar();
        realDay = gregCal.get(GregorianCalendar.DAY_OF_MONTH);
        realMonth = gregCal.get(GregorianCalendar.MONTH);
        realYear = gregCal.get(GregorianCalendar.YEAR);
        currentMonth = realMonth;
        currentYear = realYear;
        
        System.out.println("realYear="+realYear);
        System.out.println("realMonth="+realMonth);
        
        
        DefaultTableModel tableModel=(DefaultTableModel)calTable.getModel();
        String[] headers = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}; //All headers

        for (int i=0; i<7; i++)
        {
            tableModel.addColumn(headers[i]);
        }
        
        calTable.setColumnSelectionAllowed(true);
        calTable.setRowSelectionAllowed(true);
        calTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        calTable.setRowHeight(38);
        tableModel.setRowCount(6);
        tableModel.setColumnCount(7);
        
        for (int i=realYear-100; i<=realYear+100; i++)
        {
            cmbYear.addItem(String.valueOf(i));
        }


        
        refreshCal(realMonth, realYear);
    }//GEN-LAST:event_formWindowOpened

    private void btnNextMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextMonthActionPerformed
        if(currentMonth==11)
        {
            currentMonth=0;
            currentYear+=1;
        }
        else
        {
            currentMonth+=1;
        }
        refreshCal(currentMonth, currentYear);
    }//GEN-LAST:event_btnNextMonthActionPerformed

    private void btnPrevMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevMonthActionPerformed
        if(currentMonth==0)
        {
            currentMonth=11;
            currentYear-=1;
        }
        else
        {
            currentMonth-=1;
        }
        refreshCal(currentMonth, currentYear);
    }//GEN-LAST:event_btnPrevMonthActionPerformed

    private void btnNextYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextYearActionPerformed
        if(currentYear==realYear+100)
        {
            btnNextYear.setEnabled(false);
        }
        else
            currentYear+=1;
        refreshCal(currentMonth,currentYear);
    }//GEN-LAST:event_btnNextYearActionPerformed

    private void btnPrevYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevYearActionPerformed
        if(currentYear==realYear-100)
        {
            btnPrevYear.setEnabled(false);
        }
        else
            currentYear-=1;
        refreshCal(currentMonth,currentYear);
    }//GEN-LAST:event_btnPrevYearActionPerformed

    private void cmbYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbYearActionPerformed
        currentYear=Integer.parseInt(cmbYear.getSelectedItem().toString());
        refreshCal(currentMonth, currentYear);
    }//GEN-LAST:event_cmbYearActionPerformed

    private void calMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_calMouseClicked
                    int row=calTable.rowAtPoint(evt.getPoint());          // Gets the row where the mouse is pointing
                    int col= calTable.columnAtPoint(evt.getPoint());      // Gets the col where the mouse is pointing
                    
                    
                    try
                    {
                        selectedDate=Integer.parseInt(calTable.getValueAt(row, col).toString());
                    }
                    catch(Exception e)
                    {
                        selectedDate=0;
                        //e.printStackTrace();
                    }
                        System.out.println("Date: "+selectedDate);
                        selectedMonth=getMonth(lblMonth.getText());
                        System.out.println("Month: "+selectedMonth);
                    try
                    {
                        selectedYear=Integer.parseInt(cmbYear.getSelectedItem().toString());
                    }
                    catch(Exception ex)
                    {
                        selectedYear=realYear;
                    }
                    System.out.println("Year: "+selectedYear);
                    if(selectedDate>=1 && selectedDate<=31 && selectedMonth>=1 && selectedMonth<=12)
                    {
                        CalendarOptions calOps=new CalendarOptions();
                        calOps.setVisible(true);
                        this.dispose();
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null,"Invalid Date");
                    }
                    
    }//GEN-LAST:event_calMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNextMonth;
    private javax.swing.JButton btnNextYear;
    private javax.swing.JButton btnPrevMonth;
    private javax.swing.JButton btnPrevYear;
    private javax.swing.JTable calTable;
    private javax.swing.JComboBox<String> cmbYear;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMonth;
    // End of variables declaration//GEN-END:variables

        void refreshCal(int month, int year)
        {
            String[] months =  {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
            
            int numOfDays;
            int startOfMonth;
            
            lblMonth.setText(months[month]);
            cmbYear.setSelectedItem(String.valueOf(year));
            
            btnNextMonth.setEnabled(true);
            btnNextYear.setEnabled(true);
            btnPrevMonth.setEnabled(true);
            btnPrevYear.setEnabled(true);
            if(month==11)
            {
                btnNextMonth.setEnabled(false);
            }
            if(month==0)
            {
                btnPrevMonth.setEnabled(false);
            }
            if(year==realYear-10)
            {
                btnPrevYear.setEnabled(false);
            }
            if(year==realYear+100)
            {
                btnNextYear.setEnabled(false);
            }
            
            //Clearing the previous values in calendar
            for(int i=0;i<6;i++)
            {
                for(int j=0;j<7;j++)
                {
                    calTable.setValueAt(null, i, j);    //Setting null value to every cell 
                }
            }
            
            GregorianCalendar calendar = new GregorianCalendar(year, month, 1); //Gives first day of the month
            numOfDays = calendar.getActualMaximum(GregorianCalendar.DAY_OF_MONTH); //Gives total Number of days
            startOfMonth=calendar.get(GregorianCalendar.DAY_OF_WEEK); // Gives the starting day
            System.out.println("startOfMonth = "+startOfMonth);
            System.out.println("numOfDays = "+numOfDays);
            
            
            // Making the new calendar
            
            for(int i=1;i<=numOfDays;i++)
            {
                int row = (i+startOfMonth-2)/7;
                
                int column  =  ((i+startOfMonth)%7-2%7 + 7)%7;
                
                calTable.setValueAt(i, row, column);
                
                calTable.setDefaultRenderer(calTable.getColumnClass(0), new TableCellRenderer());
            }
    
            
        }
        
        protected int getMonth(String month){
            int monthNumber=-1;
            if(month=="January")
            {
                monthNumber=1;
            }
            else if(month=="February")
            {
                monthNumber=2;
            }
            else if(month=="March")
            {
                monthNumber=3;
            }
            else if(month=="April")
            {
                monthNumber=4;
            }
            else if(month=="May")
            {
                monthNumber=5;
            }
            else if(month=="June")
            {
                monthNumber=6;
            }
            else if(month=="July")
            {
                monthNumber=7;
            }
            else if(month=="August")
            {
                monthNumber=8;
            }
            else if(month=="September")
            {
                monthNumber=9;
            }
            else if(month=="October")
            {
                monthNumber=10;
            }
            else if(month=="November")
            {
                monthNumber=11;
            }
            else if(month=="December")
            {
                monthNumber=12;
            }
            return monthNumber;
        }
        
        
}
